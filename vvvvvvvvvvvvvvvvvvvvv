type ide = string;;
type exp = Eint of int | Ebool of bool | Estring of string | Den of ide | Prod of exp * exp | Sum of exp * exp | Diff of exp * exp |
	Eq of exp * exp | Minus of exp | IsZero of exp | Or of exp * exp | And of exp * exp | Not of exp |
	Ifthenelse of exp * exp * exp | Let of ide * exp * exp | Fun of ide * exp | FunCall of exp * exp | 
	Letrec of ide * exp * exp |  Edict of (ide * exp) list |  Get of exp * ide | Insert of exp * ide * exp | Remove of exp * ide | Clear of exp  |ApplyOver of exp * exp

(*ambiente polimorfo*)

type 't env = ide -> 't;;
let emptyenv (v : 't) = function x -> v;;
let applyenv (r : 't env) (i : ide) = r i;;
let bind (r : 't env) (i : ide) (v : 't) = function x -> if x = i then v else applyenv r x;;

(*tipi esprimibili*)
type evT = Int of int | Bool of bool | String of string | Unbound | FunVal of evFun | RecFunVal of ide * evFun | DictValue of (ide * evT) list

and evFun = ide * exp * evT env

(*rts*)
(*type checking*)
let typecheck (s : string) (v : evT) : bool = match s with
	| "int" -> (match v with
		|Int(_) -> true 
		|_ -> false) 
	| "bool" -> (match v with
		|Bool(_) -> true 
		|_ -> false) 
    | "string" -> (match v with
		|String(_) -> true 
		|_ -> false) 
	|_ -> failwith("not a valid type");;

(*funzioni primitive*)
let prod x y = if (typecheck "int" x) && (typecheck "int" y) then
    ( match ( x, y) with 
        ( Int(n), Int(u) ) -> Int(n * u )
      | _ -> failwith (" Type error "))
  else failwith ( "Type error" );;

let sum x y = if (typecheck "int" x) && (typecheck "int" y)
  then (match (x,y) with
           (Int(n),Int(u)) -> Int(n+u)
         | _-> failwith("Type error"))
  else failwith("Type error");;


let diff x y = if (typecheck "int" x) && (typecheck "int" y)
  then (match (x,y) with
           (Int(n),Int(u)) -> Int(n-u)
         | _-> failwith("Type error"))
  else failwith("Type error");;

let eq x y = if (typecheck "int" x) && (typecheck "int" y)
  then (match (x,y) with
           (Int(n),Int(u)) -> Bool(n=u)
         | _-> failwith("Type error"))
  else failwith("Type error");;

let minus x = if (typecheck "int" x) 
  then (match x with
           Int(n) -> Int(-n)
         | _-> failwith("Type error"))
  else failwith("Type error");;

let iszero x = if (typecheck "int" x)
  then (match x with
           Int(n) -> Bool(n=0)
         | _-> failwith("Type error"))
  else failwith("Type error");;

let vel x y = if (typecheck "bool" x) && (typecheck "bool" y)
  then (match (x,y) with
           (Bool(b),Bool(e)) -> (Bool(b||e))
         | _-> failwith("Type error"))
  else failwith("Type error");;

let et x y = if (typecheck "bool" x) && (typecheck "bool" y)
  then (match (x,y) with
           (Bool(b),Bool(e)) -> Bool(b&&e)
         | _-> failwith("Type error"))
  else failwith("Type error");;

let non x = if (typecheck "bool" x)
  then (match x with
           Bool(true) -> Bool(false) |
           Bool(false) -> Bool(true)
         | _-> failwith("Type error"))
  else failwith("Type error");;
	
(*interprete*) 
let rec eval (e : exp) (r : evT env) : evT = match e with
	Edict(diz) -> DictValue( evalList diz r ) |
	Eint n -> Int n | 
	Ebool b -> Bool b |
	Estring s -> String s |
	IsZero a -> iszero (eval a r) |
	Den i -> applyenv r i |
	Eq(a, b) -> eq (eval a r) (eval b r) |
	Prod(a, b) -> prod (eval a r) (eval b r) |
	Sum(a, b) -> sum (eval a r) (eval b r) |
	Diff(a, b) -> diff (eval a r) (eval b r) |
	Minus a -> minus (eval a r) |
	And(a, b) -> et (eval a r) (eval b r) |
	Or(a, b) -> vel (eval a r) (eval b r) |
	Not a -> non (eval a r) |
	Ifthenelse(a, b, c) -> 
		let g = (eval a r) in
			if (typecheck "bool" g) 
				then (if g = Bool(true) then (eval b r) else (eval c r))
				else failwith ("nonboolean guard") |
    Let(i, d1, e2) -> eval e2 (bind r i (eval d1 r)) |
	Fun(i, a) -> FunVal(i, a, r) |
	FunCall(f, ev) -> 
		let fClosure = (eval f r) in
			(match fClosure with
				FunVal(v, fBody, fDecEnv) -> 
					eval fBody (bind fDecEnv v (eval ev r)) |
				RecFunVal(g, (v, fBody, fDecEnv)) -> 
					let aVal = (eval ev r) in
						let rEnv = (bind fDecEnv g fClosure) in
							let aEnv = (bind rEnv v aVal) in
								eval fBody aEnv |
				_ -> failwith("non functional value")) |
	Letrec(f, funDef, letBody) ->
			(match funDef with
	    		Fun(i, fBody) -> let r1 = (bind r f (RecFunVal(f, (i, fBody, r)))) in
	                 			                eval letBody r1 |
	    		_ -> failwith("non functional def")) |
	Get(d,id) ->
		let d1= (eval d r) in 
			(match d1 with 
				 DictValue(diz)-> lookup (id ,diz) | 
				 _->failwith("non Edict value")) |
	Insert(d,id,v)->
		let d1= (eval d r) in 
			(match d1 with 
				 DictValue(diz)-> if (member id diz) then failwith(" field already exists") else  (DictValue((id,eval v r)::diz))|
				_->failwith("no Edict value"))|
	 Remove(d,id)->
		let d1= (eval d r) in
			(match d1 with 
				DictValue(diz)-> DictValue(rem (diz, id) ) |
				 _->failwith("no Edict value"))	|
	
	Clear(d)->
		let d1=(eval d r) in
			(match d1 with 
				DictValue(diz)-> DictValue([]) |
				_->failwith("no Edict value"))|
	ApplyOver(f,d) ->
		let vald=(eval d r) in
			let fClosure= (eval f r) in
				(match vald with 
					DictValue(diz)-> DictValue(apply fClosure vald) |
					_->failwith("no Edict value")) 
	
	
	and evalList diz r= match diz with
		|[ ] -> [ ] 
		| (id, v)::rest -> (id, eval v r) :: evalList rest r 
	
	and lookup (id, d)  =
		match d with
			|[ ]->Unbound 
			| (i,v)::rest-> if(i=id) then v else lookup(id,rest)
			(*|_->failwith("wrong Edict field") *)
					
	and member  id d = 
		match d with
		| []->false 
	    |(i, ss)::rest-> if (i=id) then true else (member id rest) 
		
	
	 and rem (d, id) = match d with 
		 |[]->[]
		 |(i,ss)::rest -> 
				if (id=i) then rest else (id,ss)::(rem (rest, i) ) 
				
							
	and apply fClosure vald  =
		match vald with 
			 | []->[] 
			 |(id,arg)::rest-> if(typecheck "string" arg) then apply fClosure rest else
				(match fClosure with  
					|FunVal(v, fBody, fDecEnv) -> let evalf=eval fBody (bind fDecEnv v arg) in
						(id,evalf)::(apply fClosure rest) 
					|_->failwith("no fuctional value")) 				
					
	
	
		
	
  ;;

(*------------------TESTS-----------------*)

let env0 = emptyenv Unbound;; (*Ambiente di partenza, vuoto*)
let emptydictionary = Edict([]);; (*Dizionario vuoto*)
let dictval= Edict(("nome", Estring("Giovanni"))::("matricola", Eint(123456))::[]);; (*Dizionario con valori*)
let dictv1= Edict (("titolo", Estring("La vita e' bella"))::("anno", Eint(1997))::("durata", Estring("2h 2m"))::[]);;

let nome = Get(dictval, "nome");;(* Ottengo il valore associato al campo indicato*)
let e = Get(dictval, "mat");; (*Errore perché il campo mat non esiste all'interno di dictval*)
let titolo= Get(dictv1, "titolo");;
let anno= Get(dictv1, "anno");;
let dictval2 = Insert(dictval, "eta'", Eint 22);; (*Inserisco il campo età con valore 22 associato in dictval*)
let dictv2 = Remove(dictv1, "durata");; (*Rimuovo il campo durata in dictv1*)
let d3 = Remove(dictval, "cognome");; (*Provo a rimuovere un campo non esistente nel dizionario*)
let cleardictval2 = Clear(dictv2);; (*Pulizia di un dizionario*)
let incr = Fun("x", Sum(Den "x", Eint 1));; (*Funzione che aggiunge 1 ad un parametro x*)
let applyfun = ApplyOver(incr, dictval2);; (*Applico la funzione solo ai campi compatibili (interi) del dizionario*)
let fun2 = Fun("x", Sum(Prod(Den "x",Den "x"), Prod(Den "x", Eint 5)));; (*Funzione che da x associa (x+2x)*)
let applyfun2 = ApplyOver(fun2, dictv1);;

(*Stampa dei dizionari di test iniziali*)
Printf.printf "\n\n****Dictionaries****\n";;
eval dictval env0;;
eval emptydictionary env0;;
